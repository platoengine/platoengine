if(ALBANY)
  if(NOT DEFINED ALBANY_BINARY)
    if(NOT DEFINED ALBANY_PATH)
      message(FATAL_ERROR "
       Albany tests are enabled, but both ALBANY_BINARY and ALBANY_PATH are not set. 
       One must be defined in order to enable Albany tests.")
    endif()
    Plato_find_exe(ALBANY_BINARY AlbanyMPMD ${ALBANY_PATH})
    if(NOT DEFINED ALBANY_BINARY)
      message(FATAL_ERROR "
       AlbanyMPMD was not found in ${ALBANY_PATH}")
    endif()
    message("-- Adding Albany tests")
    message("-- Albany MPMD executable: " ${ALBANY_BINARY})
    message("-- ")
  else()
    message("-- ALBANY_BINARY variable already set")
    message(STATUS "Using ${ALBANY_BINARY}")
  endif()
endif()

if(ANALYZE)
  if(NOT DEFINED ANALYZE_BINARY)
    if(NOT DEFINED ANALYZE_PATH)
      message(FATAL_ERROR "
       Analyze tests are enabled, but both ANALYZE_BINARY and ANALYZE_PATH are not set. 
       One must be defined in order to enable Analyze tests.")
    endif()
    Plato_find_exe(ANALYZE_BINARY analyze_MPMD ${ANALYZE_PATH})
    if(NOT DEFINED ANALYZE_BINARY)
      message(FATAL_ERROR "
       analyze_MPMD was not found in ${ANALYZE_PATH}")
    endif()
    message("-- Adding Analyze tests")
    message("-- Analyze MPMD executable: " ${ANALYZE_BINARY})
    message("-- ")
  else()
    message("-- ANALYZE_BINARY variable already set")
    message(STATUS "Using ${ANALYZE_BINARY}")
  endif()
endif()


IF( STK_ENABLED )
  add_subdirectory(CreateSupportStructure1)
  add_subdirectory(CreateSupportStructure2)
  add_subdirectory(CreateSupportStructure3)
  add_subdirectory(CreateSupportStructure4)
  add_subdirectory(CreateSupportStructure5)
  add_subdirectory(CreateSupportStructure6)
  add_subdirectory(CreateSupportStructure7)
  add_subdirectory(CreateSupportStructure8)
  add_subdirectory(2Load_OC_Restart)
ENDIF()
add_subdirectory(Su2ToExodus1)
add_subdirectory(2Load_OC)
add_subdirectory(2Load_MMA)
add_subdirectory(2Load_OC_FinalWrite)
add_subdirectory(2Load_OC_Variables)
add_subdirectory(2Load_absolute_filter_OC)
add_subdirectory(2Load_absolute_volume_OC)
add_subdirectory(2Load_filterPower_OC)
add_subdirectory(2Load_heaviside_OC)
add_subdirectory(2Load_updatingHeaviside_OC)
add_subdirectory(2Load_updatingTANH_OC)
add_subdirectory(1Load_OC_with_XMLGenerator)
if( PLATOPROXY )
add_subdirectory(Proxy_Rocket_KSBC)
add_subdirectory(Proxy_Rosenbrock_KSBC)
add_subdirectory(Proxy_Rosenbrock_BCPSO)
#add_subdirectory(Proxy_Topo2D_MMA)
add_subdirectory(Proxy_Topo2D_KSAL)
add_subdirectory(Proxy_Topo2D_LBFGS_KSAL)
add_subdirectory(Proxy_RosenbrockRadius_KSAL)
add_subdirectory(Proxy_RosenbrockRadius_LBFGS_KSAL)
add_subdirectory(Proxy_Himmelblau_ShiftedEllipse_ALPSO)
  IF( ENABLE_ROL )
    add_subdirectory(Proxy_Topo2D_ROL_KSAL)
  ENDIF()
ENDIF()
IF( ANALYZE )
  add_subdirectory(Analyze_BodyLoads_FDcheck)
  add_subdirectory(Analyze_CompMin2D_Variables)
  add_subdirectory(Analyze_CompMin2D_MultiPerf)
  add_subdirectory(Analyze_LBracket3D_Inqlty)
  add_subdirectory(Analyze_LBracket3D_Eqlty)
  add_subdirectory(Analyze_CompMin2D)
  add_subdirectory(Analyze_CompMin3D)
  add_subdirectory(Analyze_CompMin3D_GPSR)
  add_subdirectory(Analyze_CompMin3D_XMLG)
  add_subdirectory(Analyze_CompMin3D_MMA)
  add_subdirectory(Analyze_CompMin3D_Orthotropic)
  add_subdirectory(Analyze_Disp_FDcheck)
  add_subdirectory(Analyze_Disp_Opt)
  add_subdirectory(Analyze_HeatEq3D_Norm)
  add_subdirectory(Analyze_HeatEq3D_FDcheck)
  add_subdirectory(Analyze_Emech_FDcheck)
  add_subdirectory(Analyze_Tmech_FDcheck)
  add_subdirectory(Analyze_StabMech_FDcheck)
  add_subdirectory(Analyze_Tmech_Opt)
  add_subdirectory(Analyze_TransMech_Opt)
  add_subdirectory(Analyze_TransMech_FDcheck)
  add_subdirectory(Analyze_TransMechDamped_FDcheck)
  add_subdirectory(Analyze_TransMechTDBCs_FDcheck)
  add_subdirectory(Analyze_Tmech_Opt_XMLG)
  add_subdirectory(Analyze_Thermal_Opt)
  add_subdirectory(Analyze_Thermal_Opt_XMLG)
  add_subdirectory(Analyze_TransientTM_FDcheck)
  add_subdirectory(Analyze_Uncertain_Loads)
  add_subdirectory(Analyze_2Phys_Sym)
  IF( GEOMETRY )
    add_subdirectory(Analyze_CompMin3D_MLS)
    add_subdirectory(Analyze_Mitchell2D_MLS_PE)
    add_subdirectory(Analyze_CompMin2D_Variables_MLS)
  ENDIF()
  IF( STK_ENABLED )
    add_subdirectory(Analyze_CompMin3D_Restart)
  ENDIF()
  if( ESP_ENABLED )
    add_subdirectory(Analyze_ParallelESP)
    add_subdirectory(Analyze_ParallelESP_XMLG)
  ENDIF()
  IF( PLATO_TPETRA )
    add_subdirectory(Analyze_CompMin3D_Belos)
  ENDIF()
ENDIF()
IF( GEOMETRY )
  add_subdirectory(GeometryCogent/Octet)
ENDIF()

IF( ENABLE_PRUNE )
  add_subdirectory(PruneAndRefine/PruneAndRefine1)
  add_subdirectory(PruneAndRefine/PruneAndRefine2)
  add_subdirectory(PruneAndRefine/PruneAndRefine3)
  add_subdirectory(PruneAndRefine/PruneAndRefine4)
  add_subdirectory(PruneAndRefine/PruneAndRefine5)
  add_subdirectory(PruneAndRefine/PruneAndRefine6)
  add_subdirectory(PruneAndRefine/PruneAndRefine7)
  add_subdirectory(PruneAndRefine/PruneAndRefine8)
  add_subdirectory(PruneAndRefine/PruneAndRefine9)
  add_subdirectory(PruneAndRefine/PruneAndRefine10)
  add_subdirectory(PruneAndRefine/PruneAndRefine11)
  add_subdirectory(PruneAndRefine/PruneAndRefine12)
  add_subdirectory(PruneAndRefine/PruneAndRefine13)
  add_subdirectory(PruneAndRefine/PruneAndRefine14)
  add_subdirectory(PruneAndRefine/PruneAndRefine15)
  add_subdirectory(PruneAndRefine/PruneAndRefine16)
  add_subdirectory(PruneAndRefine/PruneAndRefine17)
  add_subdirectory(PruneAndRefine/PruneAndRefine18)
  add_subdirectory(PruneAndRefine/PruneAndRefine19)
  add_subdirectory(PruneAndRefine/PruneAndRefine20)
# Disabling this use case for now when you have blocks with beams in them. For some reason
# this is not working using the percept in trilinos (it does work using the percept in Sierra). 
# I have asked Brian Carnes about it. 
#  add_subdirectory(PruneAndRefine/PruneAndRefine21)
  add_subdirectory(PruneAndRefine/PruneAndRefine22)
ENDIF()

IF( PLATO_ENABLE_SERVICES_PYTHON AND EXPY AND GEOMETRY )
  find_package(Python2 COMPONENTS Development Interpreter)
  add_subdirectory(GeometryMLS/ComputeMLSField)
  add_subdirectory(GeometryMLS/ComputeMLSField2D)
  add_subdirectory(GeometryMLS/MapFieldToMLSPoints)
  add_subdirectory(GeometryMLS/MapFieldToMLSPoints2D)
  add_subdirectory(GeometryMLS/InitializeMLSPoints)
  add_subdirectory(GeometryCogent/Cylinder_Tet)
  add_subdirectory(GeometryCogent/Cylinder_Hex)
  add_subdirectory(GeometryCogent/Brick)
  add_subdirectory(GeometryCogent/5Bolt)
  IF( ANALYZE )
    add_subdirectory(ComputeGradientX)
    add_subdirectory(ComputeGradientX_ADBC)
    add_subdirectory(ComputeGradientX_StabMech)
    add_subdirectory(Analyze_Mitchell2D_Simp)
    add_subdirectory(Analyze_Mitchell2D_Heaviside)
    add_subdirectory(Analyze_Mitchell2D_MLS)
    add_subdirectory(Analyze_LBracket2D_Heaviside)
    add_subdirectory(Analyze_LBracket2D_MLS)
    add_subdirectory(GeometryMLS/SolveWithMLSField)
    add_subdirectory(GeometryMLS/SolveWithMLSField2D)
  ENDIF()
ENDIF()

add_subdirectory(Albany_2Load_OC)
add_subdirectory(Periodic_BCs)
add_subdirectory(ErrorHandling/AggregatorOutput)
add_subdirectory(ErrorHandling/BogusComm)
add_subdirectory(ErrorHandling/DoublyNestedOperation)
add_subdirectory(ErrorHandling/MissingOperation)
add_subdirectory(ErrorHandling/MultipleOperations)
add_subdirectory(ErrorHandling/StageInputs)
add_subdirectory(ErrorHandling/TwoPerformersOneOperation1)
add_subdirectory(ErrorHandling/TwoPerformersOneOperation2)
add_subdirectory(ErrorHandling/WrongOperationInput1)
add_subdirectory(ErrorHandling/WrongOperationInput2)
add_subdirectory(ErrorHandling/WrongOperationInput3)
add_subdirectory(ErrorHandling/WrongOperationInput4)
add_subdirectory(ErrorHandling/WrongOperationInput5)
add_subdirectory(ErrorHandling/WrongOperationInput6)
add_subdirectory(ErrorHandling/WrongOperationInput7)
