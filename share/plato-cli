#!/usr/bin/env spack-python
## /usr/bin/python3

import subprocess
import argparse
import spack
import json
import sys
import os

from inspect import currentframe, getframeinfo
from pathlib import Path

def source_dir():
  filename = getframeinfo(currentframe()).filename
  parent = Path(filename).resolve().parent
  return str(parent)

def loadState():
  src_dir = source_dir()
  fileName = src_dir + "/config.json"
  try:
    f = open(fileName, 'r')
  except FileNotFoundError:
    return {}
  else:
    data = json.load(f)
    return data

platoState = loadState()

def is_executable(exeName):
  command = 'which ' + exeName
  try:
    response = subprocess.check_output(command.split())
  except:
    return False
  else:
    return True

def report(action):
  print(" Plato CLI: " + action)

def listInstalled(packageName):
  findCommand = spack.main.SpackCommand('find')
  try:
    response = findCommand('-lvp', packageName).split('\n')[2:-1]
  except:
    report('spack find returned none. ' + packageName + ' not installed')
  else:
    if len(response):
      report('available options:')
      for pkg in response:
        tokens = pkg.split(' ')
        tokens = list(filter(None, tokens))
        tokens = tokens[:4]
        report(' '.join(tokens))
      report("use 'spack load /<hash>' to select an option")

def execute_analyze(args):

  if not is_file(args.input):
    report("input file, " + args.input + ", doesn't exist.")
    return

  if not is_executable('analyze'):
    report("'analyze' executable not found")
    listInstalled('platoanalyze')
    return

  report("executing analyze")
  os.system('analyze --input-config=' + args.input)


def write_analyze_template(args):
  print("writing analyze template to console: " + args.template)

def list_analyze_templates(args):
  print("listing analyze templates to console")


def execute_plato(args):
  print("executing plato:")
  print("XMLGenerator " + args.input)
  print("source mpirun.source")

def write_plato_template(args):
  print(args)
  print("writing plato template to console: " + args.template)

def list_plato_templates(args):
  print("listing plato templates to console")

def dictToArgs(dictionary):
  retVal = ""
  for key, value in dictionary.items():
    if isinstance(value, list):
      retVal += " " + key + "="
      for entry in value:
        retVal += str(entry) + ","
      retVal = retVal[:-1] # remove superfluous comma
    else:
      retVal += (" " + key + "=" + str(value))

  return retVal

def is_file(fileName):
  inputFile = Path(fileName)
  if not inputFile.is_file():
    return False
  else:
    return True

def esp_action(args):

  if not is_executable('serveCSM'):
    report("'esp' module not loaded")
    listInstalled('esp')
    return

  report(action="Generating exodus mesh from csm model")

  if not is_file(args.input):
    report("model file, " + args.input + ", doesn't exist.")
    return

  argsDict = {'modelNameIn': args.input}

  if args.output_model != None:
    argsDict['modelNameOut'] =  args.output_model

  if args.output_mesh != None:
    argsDict['meshName'] =  args.output_mesh

  if args.min_scale != None:
    argsDict['minScale'] =  args.min_scale

  if args.tesselation != None:
    argsDict['etoName'] =  args.tesselation

  if args.mesh_scale != None:
    argsDict['meshLengthFactor'] = args.mesh_scale

  if args.parameters != None:
    argsDict['parameters'] = args.parameters

  scriptFilePath = source_dir() + '/esp/mesh.py'

  shell_command = "python " + scriptFilePath + " " + dictToArgs(argsDict)

  subprocess.call(shell_command.split())


def xtk_action(args):
  print('calling xtk.')
  print(args)

def gmsh_action(args):
  print('calling Gmsh.')
  print(args)

def cogent_action(args):
  print('calling Cogent.')
  print(args)

def cubit_action(args):
  print('calling Cubit.')
  print(args)


def geometry_action(args):
  print('dealing with some geometry in this hizzow.')
  print(args)

def analyze_action(args):

  ## if an input file was provided call analyze
  if args.input != None:
    execute_analyze(args)
    return

  ## if a template is requested
  if args.template != None:
    write_analyze_template(args)
    return

  if args.list_templates == True:
    list_analyze_templates(args)
    return
  


def optimize_action(args):

  ## if an input file was provided call plato
  if args.input != None:
    execute_plato(args)
    return

  ## if a template is requested
  if args.template != None:
    write_plato_template(args)
    return

  if args.list_templates == True:
    list_plato_templates(args)
    return

def writeState(state):
  src_dir = source_dir()
  fileName = src_dir + "/state.json"
  with open(fileName, 'w') as f:
    json.dump(state, f)

def saveState(key, value):

  global platoState

  platoState = loadState()
  platoState[key] = value
  writeState(platoState)

#def configure_action(args):
#
#  if args.spack_dir != None:
#    saveState(key='spack_dir', value=args.spack_dir)
#    return

## create top level parser
#
parser = argparse.ArgumentParser(prog='plato', description='Plato command line interface (CLI)')


## add subparsers container
#
subparsers = parser.add_subparsers(help='plato sub-command help')

## setup configure sub parser
#
#configure_parser = subparsers.add_parser('configure', help='Plato configure options', aliases=['c', 'config'])
#c_group = configure_parser.add_mutually_exclusive_group(required=True)
#c_group.add_argument('--spack-dir', help='Location of spack.')
#configure_parser.set_defaults(func=configure_action)

## setup geometry sub parser
#
geometry_parser = subparsers.add_parser('geometry', help='Plato Geometry options', aliases=['g'])
#geometry_parser.set_defaults(func=lambda x: geometry_parser.print_usage())
geo_subparsers = geometry_parser.add_subparsers(help='geometry sub-command help', dest='geo_execmode')

# geometry - esp
esp_parser = geo_subparsers.add_parser('esp', help='ESP options')
esp_parser.add_argument('--input', help='Input file name.', required=True)

esp_parser.add_argument('--output-mesh', dest='output_mesh', \
  help='Output mesh file name. If not specified, base name of input file is used.')

esp_parser.add_argument('--output-model', dest='output_model', \
  help='Output model file name. If not specified, updated model file is not written.')

esp_parser.add_argument('--tesselation', help='Tesellation output file name. If not specified, tesselation is not generated.')

esp_parser.add_argument('--mesh-scale', dest='mesh_scale', \
  help='Scale factor applied to meshSize specified in input model. Default value is 1.0. refLen = meshScale*meshSize')

esp_parser.add_argument('--min-scale', dest='min_scale', \
  help='Minimum spacing bound relative to refLen.  Default value is 0.2. minSpacing = minScale*refLen')

esp_parser.add_argument('--max-scale', dest='max_scale', \
  help='Maximum spacing bound relative to refLen.  Default value is 1.0. maxSpacing = maxScale*refLen')

esp_parser.add_argument('--parameters', dest='parameters', nargs='*', \
  help='List of parameter values to construct the mesh')

esp_parser.set_defaults(func=esp_action)

# geometry - xtk
xtk_parser = geo_subparsers.add_parser('xtk', help='XTK options')
xtk_parser.add_argument('--input', help='input file name')
xtk_parser.set_defaults(func=xtk_action)

# geometry - gmsh
gmsh_parser = geo_subparsers.add_parser('gmsh', help='Gmsh options')
gmsh_parser.add_argument('--input', help='input file name')
gmsh_parser.set_defaults(func=gmsh_action)

# geometry - cogent
cogent_parser = geo_subparsers.add_parser('cogent', help='Cogent options')
cogent_parser.add_argument('--input', help='input file name')
cogent_parser.set_defaults(func=cogent_action)

# geometry - cubit
cubit_parser = geo_subparsers.add_parser('cubit', help='Cubit options')
cubit_parser.add_argument('--input', help='input file name')
cubit_parser.set_defaults(func=cubit_action)


## setup analyze sub parser
#
analyze_parser = subparsers.add_parser('analyze', help='Plato Analyze options', aliases=['a'])
a_group = analyze_parser.add_mutually_exclusive_group(required=True)
a_group.add_argument('--input', help='input file name')
a_group.add_argument('--template', help='template name')
a_group.add_argument('--list-templates', dest='list_templates', action='store_true', help='list available templates')
analyze_parser.set_defaults(func=analyze_action)

## setup optimize sub parser
#
optimize_parser = subparsers.add_parser('optimize', help='Plato Optimize options', aliases=['o'])
o_group = optimize_parser.add_mutually_exclusive_group(required=True)
o_group.add_argument('--input', help='input file name')
o_group.add_argument('--template', help='template name')
o_group.add_argument('--list-templates', dest='list_templates', action='store_true', help='list available templates')
optimize_parser.set_defaults(func=optimize_action)


## parse
#
args = parser.parse_args()
args.func(args)
